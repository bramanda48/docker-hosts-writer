using Docker.DotNet;
using Docker.DotNet.Models;
using Newtonsoft.Json;

namespace docker_hosts_writer
{
    class DockerMonitor<T> : IProgress<T>
    {
        public delegate void CallbackDelegate(T value);

        public event CallbackDelegate Callback;

        public DockerMonitor(CallbackDelegate callback)
        {
            Callback += callback;
        }

        public void Report(T value)
        {
            Callback?.Invoke(value);
        }
    }

    public class Worker : BackgroundService
    {
        private readonly ILogger<Worker> _logger;
        private readonly ILoggerFactory _loggerFactory;
        private readonly Hosts _hosts;

        private DockerClient? _dockerClient;

        private string _beginBlock = "# DOCKER CONTAINERS START (Autogenerated By docker-hosts-writer. DO NOT CHANGE.)";
        private string _endBlock = "# DOCKER CONTAINERS END";

        private bool _isFirstRunning = true;

        public Worker(
            ILogger<Worker> logger,
            ILoggerFactory loggerFactory,
            Hosts hosts)
        {
            _logger = logger;
            _loggerFactory = loggerFactory;
            _hosts = hosts;
        }

        protected override async Task ExecuteAsync(CancellationToken cancellationToken)
        {
            try
            {
                _logger.LogInformation(1000, "Starting docker-hosts-writer service");

                if (_dockerClient == null)
                    _dockerClient = await GetClient(cancellationToken);

                // Setup hosts
                _hosts.SetConfig(_dockerClient, String.Empty, ".docker");

                // First running
                await DoWhenFirstRunning(cancellationToken);

                // Monitor events
                var containerEventsParameters = new ContainerEventsParameters
                {
                    Filters = new Dictionary<string, IDictionary<string, bool>>
                    {
                        {
                            "event", new Dictionary<string, bool>()
                            {
                                {"start", true},
                                {"die", true}
                            }
                        },
                        {
                            "type", new Dictionary<string, bool>()
                            {
                                {"container", true},
                            }
                        },
                    },
                };

                _logger.LogInformation(1000, "Monitoring docker events");
                DockerMonitor<JSONMessage> monitor = new DockerMonitor<JSONMessage>(async value =>
                {
                    try
                    {
                        _logger.LogInformation(1000, $"New ${value.Status} events from container {value.ID}");
                        _logger.LogDebug(JsonConvert.SerializeObject(value));

                        if (value.Status == "start")
                            await _hosts.AddHost(value.ID, cancellationToken);
                        else if (value.Status == "die")
                            _hosts.RemoveHost(value.ID);

                        // Rewriting hosts file
                        DoRewritingHostsFile();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(2002, $"Exception is {ex}");
                    }
                });
                await _dockerClient.System.MonitorEventsAsync(
                    containerEventsParameters,
                    monitor,
                    cancellationToken
                );
            }
            catch (IOException)
            {
                // Re-execute if docker disconnected
                _dockerClient = await GetClient(cancellationToken);
                await ExecuteAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(2000, $"Exception is {ex}");
                if (ex.InnerException != null) _logger.LogError($"InnerException is {ex} ");
            }
        }

        private async Task DoWhenFirstRunning(CancellationToken cancellationToken)
        {
            if (!_isFirstRunning) return;

            _isFirstRunning = false;
            ContainersListParameters containerParams = new ContainersListParameters()
            {
                Filters = new Dictionary<string, IDictionary<string, bool>>()
                {
                    {
                        "status", new Dictionary<string, bool>()
                        {
                            {"running", true}
                        }
                    }
                }
            };
            _logger.LogInformation(1000, "Detected first running");

            var containers = await _dockerClient!.Containers.ListContainersAsync(containerParams);
            foreach (var value in containers)
                await _hosts.AddHost(value.ID, cancellationToken);

            // Rewriting hosts file
            DoRewritingHostsFile();
        }

        private void DoRewritingHostsFile()
        {
            var hostsPath = (OperatingSystem.IsWindows()) ? $"{Environment.GetEnvironmentVariable("windir")}\\system32\\drivers\\etc\\hosts" : "/etc/hosts";
            var dockerHosts = _hosts.GetHost();

            // Get old hosts data
            if (!File.Exists(hostsPath))
            {
                throw new FileNotFoundException($"Could not find hosts file at: {hostsPath}");
            }
            List<string> hostsLines = File.ReadAllLines(hostsPath).ToList();
            List<string> fiterLines = FilterListNotBetweenBlock(hostsLines, _beginBlock, _endBlock);

            _logger.LogDebug(1000, JsonConvert.SerializeObject(dockerHosts));

            List<string> newHostLine = fiterLines;
            List<string> newHostLogs = new List<string>() { "Adding hosts:" };

            newHostLine.Add(_beginBlock);
            foreach (KeyValuePair<string, List<DockerHosts>> hosts in dockerHosts)
            {
                foreach (DockerHosts host in hosts.Value)
                {
                    var entry = $"{host.IPAddress}\t{String.Join(" ", host.Domain)}";
                    newHostLine.Add(entry);
                    newHostLogs.Add("\t" + entry);
                }
            }
            newHostLine.Add(_endBlock);

            if (dockerHosts.Count > 0)
                _logger.LogInformation(3000, String.Join("\n", newHostLogs));

            // Writing to file
            File.WriteAllLines(hostsPath, newHostLine);
        }

        private List<string> FilterListNotBetweenBlock(List<string> list, string begin, string end)
        {
            List<string> newList = new List<string>();
            bool isInTargetBlocks = false;
            foreach (string item in list)
            {
                if (Array.Exists([begin, end], b => b.Equals(item)))
                {
                    isInTargetBlocks = !isInTargetBlocks;
                }
                else if (!isInTargetBlocks)
                {
                    newList.Add(item);
                }
            }
            return newList;
        }

        private async Task<DockerClient> GetClient(CancellationToken cancellationToken)
        {
            // If cancelation requsted
            cancellationToken.ThrowIfCancellationRequested();

            // Trying connect to docker
            string endpoint = (OperatingSystem.IsWindows()) ? "npipe://./pipe/docker_engine" : "unix:///var/run/docker.sock";
            DockerClientConfiguration config = new DockerClientConfiguration(new Uri(endpoint));
            DockerClient client = config.CreateClient();

            try
            {
                VersionResponse response = await client.System.GetVersionAsync();
                _logger.LogInformation(1000, $"Connected to Docker {response.Version} with API vesion {response.APIVersion} (Arch: {response.Arch})\n");
                return client;
            }
            catch (Exception)
            {
                _logger.LogError(2001,
                    $"Oops! Somenthing went wrong. Likely the Docker engine not running at [{client.Configuration.EndpointBaseUri}]\n" +
                    $"Retrying in 5 seconds..."
                );
                await Task.Delay(5000, cancellationToken);
                return await GetClient(cancellationToken);
            }
        }
    }
}